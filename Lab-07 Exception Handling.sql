-- Create the Customers table
CREATE TABLE Customers (
 Customer_id INT PRIMARY KEY,
 Customer_Name VARCHAR(250) NOT NULL,
 Email VARCHAR(50) UNIQUE
);
-- Create the Orders table
CREATE TABLE Orders (
 Order_id INT PRIMARY KEY,
 Customer_id INT,
 Order_date DATE NOT NULL,
 FOREIGN KEY (Customer_id) REFERENCES Customers(Customer_id)
)

--Part – A

--1
--Handle Divide by Zero Error and Print message like: Error occurs that is - Divide by zero error.
BEGIN TRY
	DECLARE @NUM1 INT,@NUM2 INT,@ANSWER INT
	SET @NUM1=10
	SET @NUM2=0
	SET @ANSWER=@NUM1/@NUM2
END TRY
BEGIN CATCH
	PRINT 'ERROR MESSAGE:'+ERROR_MESSAGE()
END CATCH

--2
--Try to convert string to integer and handle the error using try…catch block.
BEGIN TRY
	DECLARE @NUM INT,@STR VARCHAR(30)
	SET @STR='DARSHAN'
	SET @NUM=CAST(@STR AS INT)
END TRY
BEGIN CATCH
	PRINT 'ERROR MESSAGE:'+ERROR_MESSAGE()
END CATCH

--3
--Create a procedure that prints the sum of two numbers: take both numbers as integer & handle
--exception with all error functions if any one enters string value in numbers otherwise print result.
CREATE PROCEDURE PR_SUM_ERROR
	@NUM1 VARCHAR(50),@NUM2 VARCHAR(50)
AS
BEGIN
	BEGIN TRY
		DECLARE @INTNUM1 INT=CAST(@NUM1 AS INT)
		DECLARE @INTNUM2 INT=CAST(@NUM2 AS INT)
		PRINT 'SUM IS : '+CAST(@INTNUM1+@INTNUM2 AS VARCHAR(50))
	END TRY
	BEGIN CATCH
		PRINT 'ERROR NUMBER : '+CAST(ERROR_NUMBER() AS VARCHAR(50))
		PRINT 'ERROR SEVERITY : '+CAST(ERROR_SEVERITY() AS VARCHAR(50))
		PRINT 'ERROR STATE : '+CAST(ERROR_STATE() AS VARCHAR(50))
		PRINT 'ERROR PROCEDURE : '+CAST(ERROR_PROCEDURE() AS VARCHAR(50))
		PRINT 'ERROR MESSAGE : '+CAST(ERROR_MESSAGE() AS VARCHAR(50))
		PRINT 'ERROR LINE : '+CAST(ERROR_LINE() AS VARCHAR(50))
	END CATCH
END
PR_SUM_ERROR 1,'DARSHAN'

--4
--Handle a Primary Key Violation while inserting data into customers table and print the error details
--such as the error message, error number, severity, and state.
INSERT INTO CUSTOMERS VALUES(1,'DARSHAN','darshan@gmail.com')
BEGIN TRY
	INSERT INTO CUSTOMERS VALUES(1,'DARSHAN','darshan@gmail.com')
END TRY
BEGIN CATCH
		PRINT 'ERROR NUMBER : '+CAST(ERROR_NUMBER() AS VARCHAR(50))
		PRINT 'ERROR SEVERITY : '+CAST(ERROR_SEVERITY() AS VARCHAR(50))
		PRINT 'ERROR STATE : '+CAST(ERROR_STATE() AS VARCHAR(50))
		PRINT 'ERROR PROCEDURE : '+CAST(ERROR_PROCEDURE() AS VARCHAR(50))
		PRINT 'ERROR MESSAGE : '+CAST(ERROR_MESSAGE() AS VARCHAR(50))
		PRINT 'ERROR LINE : '+CAST(ERROR_LINE() AS VARCHAR(50))
END CATCH

--5
--Throw custom exception using stored procedure which accepts Customer_id as input & that throws
--Error like no Customer_id is available in database.
CREATE PROCEDURE PR_CUSTOM_EXCEPTION
	@CUSTOMERID INT
AS
BEGIN
	IF NOT EXISTS(SELECT 1 FROM CUSTOMERS WHERE CUSTOMER_ID=@CUSTOMERID)
	BEGIN
		THROW 50001,'NO CUSTOMER_ID IS AVAILABLE IN DATABASE.',1
	END
	ELSE
	BEGIN
		PRINT 'CUSTOMER IS  EXISTS'
	END
END

PR_CUSTOM_EXCEPTION 200

--Part – B

--6
--Handle a Foreign Key Violation while inserting data into Orders table and print appropriate error
--message.
INSERT INTO ORDERS VALUES(1,1,'2025-02-11')
BEGIN TRY
	INSERT INTO ORDERS VALUES(3,5,'2025-02-11')
END TRY
BEGIN CATCH
		PRINT 'ERROR NUMBER : '+CAST(ERROR_NUMBER() AS VARCHAR(50))
		PRINT 'ERROR SEVERITY : '+CAST(ERROR_SEVERITY() AS VARCHAR(50))
		PRINT 'ERROR STATE : '+CAST(ERROR_STATE() AS VARCHAR(50))
		PRINT 'ERROR PROCEDURE : '+CAST(ERROR_PROCEDURE() AS VARCHAR(50))
		PRINT 'ERROR MESSAGE : '+CAST(ERROR_MESSAGE() AS VARCHAR(50))
		PRINT 'ERROR LINE : '+CAST(ERROR_LINE() AS VARCHAR(50))
END CATCH

--7
--Throw custom exception that throws error if the data is invalid.
CREATE PROCEDURE PR_DATAVALIDATION
	@VALUE INT
AS
BEGIN
	IF @VALUE<0
	BEGIN
		THROW 50002,'INVALID DATA:VALUES CAN NOT BE NEGATIVE.',1
	END
	ELSE
	BEGIN
		PRINT 'DATA IS VALID.'
	END
END

PR_DATAVALIDATION -2

--8. Create a Procedure to Update Customer’s Email with Error Handling
CREATE PROCEDURE PR_UPDATEEMAIL
	@CUSTOMER_ID INT,@NEWEMAIL VARCHAR(50)
AS
BEGIN
	BEGIN TRY
		UPDATE CUSTOMERS
		SET EMAIL=@NEWEMAIL
		WHERE CUSTOMER_ID=@CUSTOMER_ID
	END TRY
	BEGIN CATCH
		PRINT 'ERROR OCCURRE WHILE UPDATING EMAIL'
		PRINT 'ERROR NUMBER : '+CAST(ERROR_NUMBER() AS VARCHAR(50))
		PRINT 'ERROR MESSAGE : '+ERROR_MESSAGE()
	END CATCH
END

PR_UPDATEEMAIL 'darshan@gmail.com'

--Part – C

--9
--Create a procedure which prints the error message that “The Customer_id is already taken. Try another
--one”.
CREATE PROCEDURE PR_CUSTOMID_ALREADTTAKEN
	@CUSTOMERID INT,@CUSTOMERNAME VARCHAR(250),@EMAIL VARCHAR(50)
AS
BEGIN
	BEGIN TRY
		INSERT INTO CUSTOMERS VALUES(@CUSTOMERID,@CUSTOMERNAME,@EMAIL)
	END TRY
	BEGIN CATCH
		PRINT 'The Customer_id is already taken. Try another one.'
	END CATCH
END

PR_CUSTOMID_ALREADTTAKEN 1,'DARSHAN','DARSHAN@GMAIL.COM'

--10
--Handle Duplicate Email Insertion in Customers Table.
CREATE PROCEDURE PR_CUSTOM_DUPLICATE
	@CUSTOMERID INT,@CUSTOMERNAME VARCHAR(250),@EMAIL VARCHAR(50)
AS
BEGIN
	IF EXISTS(SELECT EMAIL FROM CUSTOMERS WHERE @EMAIL IN(SELECT EMAIL FROM CUSTOMERS))
	BEGIN
		THROW 50003,'DUPLICATE EMAIL',1
	END
	ELSE
	BEGIN
		PRINT 'EMAIL IS UNIQUE'
	END
END